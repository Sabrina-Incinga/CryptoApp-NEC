{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport { currencies } from '../currencies';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../cryptocoin.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction CryptocoinListComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const currency_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", currency_r2.symbol);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", currency_r2.symbol, \" \");\n  }\n}\nfunction CryptocoinListComponent_div_13_div_1_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const property_r6 = ctx.$implicit;\n    const coin_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Precio en \", property_r6, \": \", coin_r4.quote[property_r6].price, \" \");\n  }\n}\nfunction CryptocoinListComponent_div_13_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\")(6, \"label\", 4);\n    i0.ɵɵtext(7, \"Cantidad: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CryptocoinListComponent_div_13_div_1_p_9_Template, 2, 2, \"p\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const coin_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", coin_r4.name, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" S\\u00EDmbolo: \", coin_r4.symbol, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.Object.keys(coin_r4.quote));\n  }\n}\nfunction CryptocoinListComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, CryptocoinListComponent_div_13_div_1_Template, 10, 3, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.cryptocoinList);\n  }\n}\nexport class CryptocoinListComponent {\n  constructor(cryptocoinService, formBuilder) {\n    this.cryptocoinService = cryptocoinService;\n    this.formBuilder = formBuilder;\n    this.cryptocoinList = [];\n    this.currencies = currencies;\n    this.currencyChangeform = FormGroup;\n    this.Object = Object;\n  }\n  ngOnInit() {\n    this.getCryptocoins();\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: [null, Validators.required],\n      amount: [null, [Validators.required, Validators.min(0.01)]]\n    });\n  }\n  getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(data => {\n      this.cryptocoinList = data;\n      setInterval(() => {\n        this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(data => {\n          this.cryptocoinList = data;\n        }, error => console.log(error));\n      }, 5000);\n    }, error => console.log(error));\n  }\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform.get('fromSymbol').value;\n      const amount = this.currencyChangeform.get('amount').value;\n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, currencies.map(), amount).subscribe(result => {\n        // hacer algo con el resultado\n      });\n    }\n  }\n}\nCryptocoinListComponent.ɵfac = function CryptocoinListComponent_Factory(t) {\n  return new (t || CryptocoinListComponent)(i0.ɵɵdirectiveInject(i1.CryptocoinService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nCryptocoinListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CryptocoinListComponent,\n  selectors: [[\"app-cryptocoin-list\"]],\n  decls: 14,\n  vars: 2,\n  consts: [[\"action\", \"\"], [\"for\", \"fromSymbol\"], [\"name\", \"fromSymbol\", \"id\", \"fromSymbol\", \"formControlName\", \"fromSymbol\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"amount\"], [\"type\", \"text\", \"id\", \"amount\", \"formControlName\", \"amount\"], [\"type\", \"submit\"], [4, \"ngIf\"], [3, \"value\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"id\", \"amount\"]],\n  template: function CryptocoinListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Lista de Cryptomonedas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"form\", 0)(4, \"label\", 1);\n      i0.ɵɵtext(5, \"Seleccione tipo de moneda: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"select\", 2);\n      i0.ɵɵtemplate(7, CryptocoinListComponent_option_7_Template, 2, 2, \"option\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Cantidad a cambiar: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementStart(11, \"button\", 6);\n      i0.ɵɵtext(12, \"Cambiar\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(13, CryptocoinListComponent_div_13_Template, 2, 1, \"div\", 7);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngForOf\", ctx.currencies);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.cryptocoinList);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.NgForm, i2.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","currencies","i0","CryptocoinListComponent","constructor","cryptocoinService","formBuilder","Object","ngOnInit","getCryptocoins","currencyChangeform","group","fromSymbol","required","amount","min","getCurrencies","subscribe","data","cryptocoinList","setInterval","error","console","log","onSubmit","valid","get","value","getCurrenciesConvert","map","result","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["H:\\Sabrina\\NEC\\CryptoWebAppClient\\crypto-web-app-client\\src\\app\\cryptocoin-list\\cryptocoin-list.component.ts","H:\\Sabrina\\NEC\\CryptoWebAppClient\\crypto-web-app-client\\src\\app\\cryptocoin-list\\cryptocoin-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CryptocoinService, cryptocoin } from '../cryptocoin.service';\nimport { currencies } from '../currencies';\n\n@Component({\n  selector: 'app-cryptocoin-list',\n  templateUrl: './cryptocoin-list.component.html',\n  styleUrls: ['./cryptocoin-list.component.css']\n})\nexport class CryptocoinListComponent implements OnInit{\n  cryptocoinList : cryptocoin[] = [];\n  currencies = currencies;\n  currencyChangeform = FormGroup;\n\n  constructor(public cryptocoinService: CryptocoinService, private formBuilder: FormBuilder){};\n\n  ngOnInit(): void {\n    this.getCryptocoins();\n\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: [null, Validators.required],\n      amount: [null, [Validators.required, Validators.min(0.01)]]\n    });\n  }\n\n  Object = Object;\n\n  private getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n      (data) => {\n        this.cryptocoinList = data;\n        setInterval(() => {\n          this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n            (data) => {\n              this.cryptocoinList = data;\n            },\n            (error) => console.log(error)\n          );\n        }, 5000);\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform.get('fromSymbol').value;\n      const amount = this.currencyChangeform.get('amount').value;\n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, currencies.map(), amount).subscribe(result => {\n        // hacer algo con el resultado\n      });\n    }\n  }\n}\n","<h2>Lista de Cryptomonedas</h2>\n<div>\n    <form action=\"\">\n        <label for=\"fromSymbol\">Seleccione tipo de moneda: </label>\n        <select name=\"fromSymbol\" id=\"fromSymbol\" formControlName=\"fromSymbol\">\n            <option value={{currency.symbol}} *ngFor=\"let currency of currencies\">\n                {{currency.symbol}}\n            </option>\n        </select>\n        <label for=\"amount\">Cantidad a cambiar: </label>\n        <input type=\"text\" id=\"amount\" formControlName=\"amount\">\n        <button type=\"submit\">Cambiar</button>\n    </form>\n</div>\n\n<div *ngIf=\"cryptocoinList\">\n    <div *ngFor=\"let coin of cryptocoinList\">\n\n    <h3>\n        {{ coin.name }}\n    </h3>\n\n    <p>\n        Símbolo: {{ coin.symbol }}\n    </p>\n    <p>\n        <label for=\"amount\">Cantidad: </label>\n        <input type=\"text\" id=\"amount\">\n    </p>\n    <p *ngFor=\"let property of Object.keys(coin.quote)\">\n        Precio en {{property}}: {{ coin.quote[property].price }}\n    </p>\n\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}