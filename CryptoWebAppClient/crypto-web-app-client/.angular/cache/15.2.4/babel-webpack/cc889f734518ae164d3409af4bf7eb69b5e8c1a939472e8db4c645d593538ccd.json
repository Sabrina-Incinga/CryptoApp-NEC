{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { currencies } from '../currencies';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../cryptocoin.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction CryptocoinListComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const currency_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", currency_r2.symbol);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", currency_r2.symbol, \" \");\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"strong\");\n    i0.ɵɵtext(2, \"Cantidad: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const coin_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.Object.keys(ctx_r5.currencyConvertData).includes(coin_r4.symbol) ? ctx_r5.currencyConvertData[coin_r4.symbol].price : (tmp_0_0 = ctx_r5.currencyChangeform.get(\"amount\")) == null ? null : tmp_0_0.value, \" \");\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"strong\");\n    i0.ɵɵtext(1, \"Cantidad: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n  }\n  if (rf & 2) {\n    const coin_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ((tmp_0_0 = ctx_r7.currencyChangeform.get(\"fromSymbol\")) == null ? null : tmp_0_0.value.toString()) === coin_r4.symbol.toString() ? (tmp_0_0 = ctx_r7.currencyChangeform.get(\"amount\")) == null ? null : tmp_0_0.value : 1, \" \");\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_section_12_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵelement(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const property_r14 = ctx.$implicit;\n    const coin_r4 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r13 = i0.ɵɵnextContext(2);\n    let tmp_0_0;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Precio en USD: \", coin_r4.quote[property_r14].price * ((tmp_0_0 = ctx_r13.currencyChangeform.get(\"amount\")) == null ? null : tmp_0_0.value), \" \");\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_section_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\");\n    i0.ɵɵtemplate(1, CryptocoinListComponent_section_14_article_1_section_12_p_1_Template, 3, 1, \"p\", 17);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const coin_r4 = i0.ɵɵnextContext().$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r8.Object.keys(coin_r4.quote));\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵelement(1, \"strong\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const coin_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Precio en USD: \", coin_r4.quote[\"USD\"].price, \"\");\n  }\n}\nfunction CryptocoinListComponent_section_14_article_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"article\", 13)(1, \"header\")(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"body\")(5, \"p\")(6, \"strong\");\n    i0.ɵɵtext(7, \"S\\u00EDmbolo: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(9, CryptocoinListComponent_section_14_article_1_p_9_Template, 4, 1, \"p\", 14);\n    i0.ɵɵtemplate(10, CryptocoinListComponent_section_14_article_1_ng_template_10_Template, 3, 1, \"ng-template\", null, 15, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(12, CryptocoinListComponent_section_14_article_1_section_12_Template, 2, 1, \"section\", 14);\n    i0.ɵɵtemplate(13, CryptocoinListComponent_section_14_article_1_ng_template_13_Template, 3, 1, \"ng-template\", null, 16, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const coin_r4 = ctx.$implicit;\n    const _r6 = i0.ɵɵreference(11);\n    const _r9 = i0.ɵɵreference(14);\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", coin_r4.name, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", coin_r4.symbol, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.Object.keys(ctx_r3.currencyConvertData).length > 1)(\"ngIfElse\", _r6);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.Object.keys(ctx_r3.currencyConvertData).length > 1)(\"ngIfElse\", _r9);\n  }\n}\nfunction CryptocoinListComponent_section_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"section\", 11);\n    i0.ɵɵtemplate(1, CryptocoinListComponent_section_14_article_1_Template, 15, 6, \"article\", 12);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.cryptocoinList);\n  }\n}\nexport class CryptocoinListComponent {\n  constructor(cryptocoinService, formBuilder) {\n    this.cryptocoinService = cryptocoinService;\n    this.formBuilder = formBuilder;\n    this.cryptocoinList = [];\n    this.currencies = currencies;\n    this.currencyConvertData = {\n      \"\": {\n        price: 0\n      }\n    };\n    this.Object = Object;\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: ['BTC', Validators.required],\n      amount: [1, [Validators.required, Validators.min(0.01)]]\n    });\n  }\n  ngOnInit() {\n    this.getCryptocoins();\n  }\n  getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(data => {\n      this.cryptocoinList = data;\n      /* setInterval(() => {\r\n        this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\r\n          (data) => {\r\n            this.cryptocoinList = data;\r\n          },\r\n          (error) => console.log(error)\r\n        );\r\n      }, 5000); */\n    }, error => console.log(error));\n  }\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform?.get('fromSymbol')?.value;\n      const amount = this.currencyChangeform?.get('amount')?.value;\n      const toSymbols = currencies.filter(curr => curr.symbol != fromSymbol).map(curr => curr.symbol).join(',');\n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, toSymbols, amount).subscribe(result => {\n        this.currencyConvertData = result.data;\n      });\n    }\n  }\n}\nCryptocoinListComponent.ɵfac = function CryptocoinListComponent_Factory(t) {\n  return new (t || CryptocoinListComponent)(i0.ɵɵdirectiveInject(i1.CryptocoinService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n};\nCryptocoinListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CryptocoinListComponent,\n  selectors: [[\"app-cryptocoin-list\"]],\n  decls: 15,\n  vars: 3,\n  consts: [[1, \"mainContainer\"], [1, \"form\"], [3, \"formGroup\", \"ngSubmit\"], [\"for\", \"fromSymbol\"], [\"name\", \"fromSymbol\", \"id\", \"fromSymbol\", \"formControlName\", \"fromSymbol\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"amount\"], [\"type\", \"text\", \"id\", \"amount\", \"formControlName\", \"amount\"], [\"type\", \"submit\"], [\"class\", \"coinList\", 4, \"ngIf\"], [3, \"value\"], [1, \"coinList\"], [\"class\", \"coinItem\", 4, \"ngFor\", \"ngForOf\"], [1, \"coinItem\"], [4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [\"elseBlock2\", \"\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function CryptocoinListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"main\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Lista de Cryptomonedas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"section\", 1)(4, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function CryptocoinListComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Seleccione tipo de moneda: \");\n      i0.ɵɵelementStart(7, \"select\", 4);\n      i0.ɵɵtemplate(8, CryptocoinListComponent_option_8_Template, 2, 2, \"option\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"label\", 6);\n      i0.ɵɵtext(10, \"Cantidad a cambiar: \");\n      i0.ɵɵelement(11, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"button\", 8);\n      i0.ɵɵtext(13, \"Cambiar\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(14, CryptocoinListComponent_section_14_Template, 2, 1, \"section\", 9);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.currencyChangeform);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.currencies);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.cryptocoinList);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n  styles: [\".mainContainer[_ngcontent-%COMP%]{\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: space-evenly;\\r\\n    height: 100%;\\r\\n    padding: 0 1rem 6rem 1rem;\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\n.mainContainer[_ngcontent-%COMP%]   .form[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]{\\r\\n    display: flex;\\r\\n    justify-content: space-around;\\r\\n}\\r\\n\\r\\n.coinList[_ngcontent-%COMP%]{\\r\\n    display: grid;\\r\\n    height: 70%;\\r\\n    grid-template-columns: repeat(3,1fr);\\r\\n    column-gap: 2rem;\\r\\n    row-gap: 1.5rem;\\r\\n    align-items: stretch;\\r\\n}\\r\\n\\r\\n.coinItem[_ngcontent-%COMP%]{\\r\\n    border-radius: .5rem;\\r\\n    box-shadow: 0 0 .5rem .1rem rgb(56, 56, 56);\\r\\n}\\r\\n\\r\\n.coinItem[_ngcontent-%COMP%]   header[_ngcontent-%COMP%], .coinItem[_ngcontent-%COMP%]   body[_ngcontent-%COMP%] {\\r\\n    border-radius: .5rem;\\r\\n    padding: 1rem 1.5rem;\\r\\n}\\r\\n\\r\\n.coinItem[_ngcontent-%COMP%]   header[_ngcontent-%COMP%]{\\r\\n    border-radius: .5rem .5rem 0rem 0rem;\\r\\n    background-color: rgb(138, 43, 226, .5);\\r\\n    box-shadow: 0rem .01rem .5rem -1px rgb(56, 56, 56);\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3J5cHRvY29pbi1saXN0L2NyeXB0b2NvaW4tbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0Qiw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLHlCQUF5QjtJQUN6QixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFdBQVc7SUFDWCxvQ0FBb0M7SUFDcEMsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsMkNBQTJDO0FBQy9DOztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLG9DQUFvQztJQUNwQyx1Q0FBdUM7SUFDdkMsa0RBQWtEO0FBQ3REIiwic291cmNlc0NvbnRlbnQiOlsiLm1haW5Db250YWluZXJ7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgcGFkZGluZzogMCAxcmVtIDZyZW0gMXJlbTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5tYWluQ29udGFpbmVyIC5mb3JtIGZvcm17XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbn1cclxuXHJcbi5jb2luTGlzdHtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBoZWlnaHQ6IDcwJTtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDMsMWZyKTtcclxuICAgIGNvbHVtbi1nYXA6IDJyZW07XHJcbiAgICByb3ctZ2FwOiAxLjVyZW07XHJcbiAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcclxufVxyXG5cclxuLmNvaW5JdGVte1xyXG4gICAgYm9yZGVyLXJhZGl1czogLjVyZW07XHJcbiAgICBib3gtc2hhZG93OiAwIDAgLjVyZW0gLjFyZW0gcmdiKDU2LCA1NiwgNTYpO1xyXG59XHJcblxyXG4uY29pbkl0ZW0gaGVhZGVyLCAuY29pbkl0ZW0gYm9keSB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAuNXJlbTtcclxuICAgIHBhZGRpbmc6IDFyZW0gMS41cmVtO1xyXG59XHJcblxyXG4uY29pbkl0ZW0gaGVhZGVye1xyXG4gICAgYm9yZGVyLXJhZGl1czogLjVyZW0gLjVyZW0gMHJlbSAwcmVtO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDEzOCwgNDMsIDIyNiwgLjUpO1xyXG4gICAgYm94LXNoYWRvdzogMHJlbSAuMDFyZW0gLjVyZW0gLTFweCByZ2IoNTYsIDU2LCA1Nik7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","currencies","i0","CryptocoinListComponent","constructor","cryptocoinService","formBuilder","price","Object","currencyChangeform","group","fromSymbol","required","amount","min","ngOnInit","getCryptocoins","getCurrencies","subscribe","data","cryptocoinList","error","console","log","onSubmit","valid","get","value","toSymbols","filter","curr","symbol","map","join","getCurrenciesConvert","result","currencyConvertData","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["H:\\Sabrina\\NEC\\CryptoWebAppClient\\crypto-web-app-client\\src\\app\\cryptocoin-list\\cryptocoin-list.component.ts","H:\\Sabrina\\NEC\\CryptoWebAppClient\\crypto-web-app-client\\src\\app\\cryptocoin-list\\cryptocoin-list.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CryptocoinService, cryptocoin, quote } from '../cryptocoin.service';\nimport { currencies } from '../currencies';\n\n@Component({\n  selector: 'app-cryptocoin-list',\n  templateUrl: './cryptocoin-list.component.html',\n  styleUrls: ['./cryptocoin-list.component.css']\n})\nexport class CryptocoinListComponent implements OnInit{\n  cryptocoinList : cryptocoin[] = [];\n  currencies = currencies;\n  currencyChangeform: FormGroup;\n  currencyConvertData: quote = {\"\": {\n    price: 0,\n  }};\n\n  constructor(public cryptocoinService: CryptocoinService, private formBuilder: FormBuilder){\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: ['BTC', Validators.required],\n      amount: [1, [Validators.required, Validators.min(0.01)]]\n    });\n  };\n\n  ngOnInit(): void {\n    this.getCryptocoins();\n    \n  }\n\n  Object = Object;\n\n  private getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n      (data) => {\n        this.cryptocoinList = data;\n        /* setInterval(() => {\n          this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n            (data) => {\n              this.cryptocoinList = data;\n            },\n            (error) => console.log(error)\n          );\n        }, 5000); */\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform?.get('fromSymbol')?.value;\n      const amount = this.currencyChangeform?.get('amount')?.value;\n      const toSymbols = currencies.filter(curr => curr.symbol != fromSymbol).map(curr => curr.symbol).join(',');\n      \n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, toSymbols, amount).subscribe(result => {\n        this.currencyConvertData = result.data;\n        \n      });\n    }\n  }\n}\n","<main class=\"mainContainer\">\n    <h2>Lista de Cryptomonedas</h2>\n    <section class=\"form\">\n        <form [formGroup]=\"currencyChangeform\" (ngSubmit)=\"onSubmit()\">\n            <label for=\"fromSymbol\">Seleccione tipo de moneda: \n            <select name=\"fromSymbol\" id=\"fromSymbol\" formControlName=\"fromSymbol\">\n                <option value={{currency.symbol}} *ngFor=\"let currency of currencies\">\n                    {{currency.symbol}}\n                </option>\n            </select>\n            </label>\n            <label for=\"amount\">Cantidad a cambiar: \n            <input type=\"text\" id=\"amount\" formControlName=\"amount\">\n            </label>\n            <button type=\"submit\">Cambiar</button>\n        </form>\n    </section>\n\n    <section *ngIf=\"cryptocoinList\" class=\"coinList\">\n        <article *ngFor=\"let coin of cryptocoinList\" class=\"coinItem\">\n            <header>\n                <h3>\n                    {{ coin.name }}\n                </h3>\n            </header>\n            <body>\n                <p>\n                   <strong>Símbolo: </strong>  {{ coin.symbol }}\n                </p>\n                <p *ngIf=\"Object.keys(currencyConvertData).length > 1; else elseBlock\">\n                    <strong>Cantidad: </strong>  {{Object.keys(currencyConvertData).includes(coin.symbol) ? currencyConvertData[coin.symbol].price : currencyChangeform.get('amount')?.value}}\n                </p>\n                <ng-template #elseBlock>\n                    <strong>Cantidad: </strong> {{currencyChangeform.get('fromSymbol')?.value.toString() === coin.symbol.toString() ? currencyChangeform.get('amount')?.value : 1}}\n                </ng-template>\n                <section *ngIf=\"Object.keys(currencyConvertData).length > 1; else elseBlock2\">\n                    <p *ngFor=\"let property of Object.keys(coin.quote)\">\n                        <strong></strong>Precio en USD: {{ coin.quote[property].price * currencyChangeform.get('amount')?.value}}\n                    </p>\n                </section>\n                <ng-template #elseBlock2>\n                    <p><strong></strong>Precio en USD: {{ coin.quote[\"USD\"].price }}</p>\n                </ng-template>\n            </body>\n        </article>\n    </section>\n</main>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}