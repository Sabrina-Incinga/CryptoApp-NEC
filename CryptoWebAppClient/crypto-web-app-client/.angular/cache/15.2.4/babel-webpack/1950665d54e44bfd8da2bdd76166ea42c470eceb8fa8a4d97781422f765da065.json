{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { currencies } from '../currencies';\nlet CryptocoinListComponent = class CryptocoinListComponent {\n  constructor(cryptocoinService, formBuilder) {\n    this.cryptocoinService = cryptocoinService;\n    this.formBuilder = formBuilder;\n    this.cryptocoinList = [];\n    this.currencies = currencies;\n    this.currencyConvertData = {\n      \"\": {\n        price: 0\n      }\n    };\n    this.Object = Object;\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: ['BTC', Validators.required],\n      amount: [1, [Validators.required, Validators.min(0.01)]]\n    });\n  }\n  ngOnInit() {\n    this.getCryptocoins();\n  }\n  getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(data => {\n      this.cryptocoinList = data;\n      /* setInterval(() => {\r\n        this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\r\n          (data) => {\r\n            this.cryptocoinList = data;\r\n          },\r\n          (error) => console.log(error)\r\n        );\r\n      }, 5000); */\n    }, error => console.log(error));\n  }\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform?.get('fromSymbol')?.value;\n      const amount = this.currencyChangeform?.get('amount')?.value;\n      const toSymbols = currencies.filter(curr => curr.symbol != fromSymbol).map(curr => curr.symbol).join(',');\n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, toSymbols, amount).subscribe(result => {\n        this.currencyConvertData = result.data;\n      });\n    }\n  }\n};\nCryptocoinListComponent = __decorate([Component({\n  selector: 'app-cryptocoin-list',\n  templateUrl: './cryptocoin-list.component.html',\n  styleUrls: ['./cryptocoin-list.component.css']\n})], CryptocoinListComponent);\nexport { CryptocoinListComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAEnE,SAASC,UAAU,QAAQ,eAAe;AAOnC,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAQlCC,YAAmBC,iBAAoC,EAAUC,WAAwB;IAAtE,sBAAiB,GAAjBD,iBAAiB;IAA6B,gBAAW,GAAXC,WAAW;IAP5E,mBAAc,GAAkB,EAAE;IAClC,eAAU,GAAGJ,UAAU;IAEvB,wBAAmB,GAAU;MAAC,EAAE,EAAE;QAChCK,KAAK,EAAE;;IACR,CAAC;IAcF,WAAM,GAAGC,MAAM;IAXb,IAAI,CAACC,kBAAkB,GAAG,IAAI,CAACH,WAAW,CAACI,KAAK,CAAC;MAC/CC,UAAU,EAAE,CAAC,KAAK,EAAEV,UAAU,CAACW,QAAQ,CAAC;MACxCC,MAAM,EAAE,CAAC,CAAC,EAAE,CAACZ,UAAU,CAACW,QAAQ,EAAEX,UAAU,CAACa,GAAG,CAAC,IAAI,CAAC,CAAC;KACxD,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACC,cAAc,EAAE;EAEvB;EAIQA,cAAc;IACpB,IAAI,CAACX,iBAAiB,CAACY,aAAa,CAAC,sBAAsB,CAAC,CAACC,SAAS,CACnEC,IAAI,IAAI;MACP,IAAI,CAACC,cAAc,GAAGD,IAAI;MAC1B;;;;;;;;IAQF,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAC9B;EACH;EAEAG,QAAQ;IACN,IAAI,IAAI,CAACf,kBAAkB,CAACgB,KAAK,EAAE;MACjC,MAAMd,UAAU,GAAG,IAAI,CAACF,kBAAkB,EAAEiB,GAAG,CAAC,YAAY,CAAC,EAAEC,KAAK;MACpE,MAAMd,MAAM,GAAG,IAAI,CAACJ,kBAAkB,EAAEiB,GAAG,CAAC,QAAQ,CAAC,EAAEC,KAAK;MAC5D,MAAMC,SAAS,GAAG1B,UAAU,CAAC2B,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,IAAIpB,UAAU,CAAC,CAACqB,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,MAAM,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;MAEzG,IAAI,CAAC5B,iBAAiB,CAAC6B,oBAAoB,CAACvB,UAAU,EAAEiB,SAAS,EAAEf,MAAM,CAAC,CAACK,SAAS,CAACiB,MAAM,IAAG;QAC5F,IAAI,CAACC,mBAAmB,GAAGD,MAAM,CAAChB,IAAI;MAExC,CAAC,CAAC;;EAEN;CACD;AAnDYhB,uBAAuB,eALnCH,SAAS,CAAC;EACTqC,QAAQ,EAAE,qBAAqB;EAC/BC,WAAW,EAAE,kCAAkC;EAC/CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWpC,uBAAuB,CAmDnC;SAnDYA,uBAAuB","names":["Component","Validators","currencies","CryptocoinListComponent","constructor","cryptocoinService","formBuilder","price","Object","currencyChangeform","group","fromSymbol","required","amount","min","ngOnInit","getCryptocoins","getCurrencies","subscribe","data","cryptocoinList","error","console","log","onSubmit","valid","get","value","toSymbols","filter","curr","symbol","map","join","getCurrenciesConvert","result","currencyConvertData","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["H:\\Sabrina\\NEC\\CryptoWebAppClient\\crypto-web-app-client\\src\\app\\cryptocoin-list\\cryptocoin-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CryptocoinService, cryptocoin, quote } from '../cryptocoin.service';\nimport { currencies } from '../currencies';\n\n@Component({\n  selector: 'app-cryptocoin-list',\n  templateUrl: './cryptocoin-list.component.html',\n  styleUrls: ['./cryptocoin-list.component.css']\n})\nexport class CryptocoinListComponent implements OnInit{\n  cryptocoinList : cryptocoin[] = [];\n  currencies = currencies;\n  currencyChangeform: FormGroup;\n  currencyConvertData: quote = {\"\": {\n    price: 0,\n  }};\n\n  constructor(public cryptocoinService: CryptocoinService, private formBuilder: FormBuilder){\n    this.currencyChangeform = this.formBuilder.group({\n      fromSymbol: ['BTC', Validators.required],\n      amount: [1, [Validators.required, Validators.min(0.01)]]\n    });\n  };\n\n  ngOnInit(): void {\n    this.getCryptocoins();\n    \n  }\n\n  Object = Object;\n\n  private getCryptocoins() {\n    this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n      (data) => {\n        this.cryptocoinList = data;\n        /* setInterval(() => {\n          this.cryptocoinService.getCurrencies('BTC,ETH,BNB,USDT,ADA').subscribe(\n            (data) => {\n              this.cryptocoinList = data;\n            },\n            (error) => console.log(error)\n          );\n        }, 5000); */\n      },\n      (error) => console.log(error)\n    );\n  }\n\n  onSubmit() {\n    if (this.currencyChangeform.valid) {\n      const fromSymbol = this.currencyChangeform?.get('fromSymbol')?.value;\n      const amount = this.currencyChangeform?.get('amount')?.value;\n      const toSymbols = currencies.filter(curr => curr.symbol != fromSymbol).map(curr => curr.symbol).join(',');\n      \n      this.cryptocoinService.getCurrenciesConvert(fromSymbol, toSymbols, amount).subscribe(result => {\n        this.currencyConvertData = result.data;\n        \n      });\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}